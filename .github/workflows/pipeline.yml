name: Jira Data Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'jira/**'
      - 'dbt/**'
      - 'jira_pipeline.py'
      - 'Dockerfile.*'
      - '.dlt/**'
      - 'requirements.txt'
      - 'docker compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the pipeline'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - production
      dlt_run_type:
        description: 'DLT run type (only for dev)'
        required: false
        default: 'incremental'
        type: choice
        options:
          - incremental
          - full

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Development Environment - All services via Docker Compose
  dev-pipeline:
    name: Development (Local Docker Compose)
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' && github.event.inputs.environment != 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file for Docker Compose
      run: |
        cat > .env << EOF
        # Jira API Credentials
        JIRA_SUBDOMAIN=${{ secrets.JIRA_SUBDOMAIN }}
        JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
        
        # PostgreSQL Configuration (Local Docker)
        POSTGRES_USER=${{ secrets.DEV_POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.DEV_POSTGRES_PASSWORD }}
        POSTGRES_DB=${{ secrets.DEV_POSTGRES_DB }}
        POSTGRES_HOST=postgres
        POSTGRES_PORT=5432
        
        # Grafana Configuration (Local Docker)
        GRAFANA_USER=${{ secrets.DEV_GRAFANA_USER }}
        GRAFANA_PASSWORD=${{ secrets.DEV_GRAFANA_PASSWORD }}
        EOF
      env:
        # Mask sensitive values in logs
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        POSTGRES_PASSWORD: ${{ secrets.DEV_POSTGRES_PASSWORD }}
        GRAFANA_PASSWORD: ${{ secrets.DEV_GRAFANA_PASSWORD }}
        
    - name: Start PostgreSQL and Grafana services
      run: |
        echo "🐳 Starting PostgreSQL and Grafana for development..."
        
        # Start PostgreSQL first
        echo "📊 Starting PostgreSQL..."
        docker compose up -d postgres
        
        # Wait for PostgreSQL to be ready
        echo "⏳ Waiting for PostgreSQL service..."
        for i in {1..30}; do
          if docker compose exec postgres pg_isready -U ${{ secrets.DEV_POSTGRES_USER }} -d ${{ secrets.DEV_POSTGRES_DB }}; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          echo "⏳ Waiting for PostgreSQL... (attempt $i/30)"
          sleep 2
        done
        
        # Start Grafana
        echo "📈 Starting Grafana..."
        docker compose up -d grafana
        
        echo "✅ PostgreSQL and Grafana started."
        docker compose ps

    - name: Run DLT + DBT Pipeline in Docker
      run: |
        echo "🚀 Running DLT + DBT pipeline in development mode..."
        
        # Wait for PostgreSQL to be ready before running DLT
        echo "⏳ Ensuring PostgreSQL is ready..."
        for i in {1..30}; do
          if docker compose exec postgres pg_isready -U ${{ secrets.DEV_POSTGRES_USER }} -d ${{ secrets.DEV_POSTGRES_DB }}; then
            echo "✅ PostgreSQL is ready for DLT!"
            break
          fi
          echo "⏳ Waiting for PostgreSQL... (attempt $i/30)"
          sleep 2
        done
        
        # Run DLT container with environment variables and execute pipeline
        echo "🚀 Starting DLT pipeline..."
        docker compose run --rm --entrypoint="" -e JIRA_SUBDOMAIN=${{ secrets.JIRA_SUBDOMAIN }} -e JIRA_EMAIL=${{ secrets.JIRA_EMAIL }} -e JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }} dlt /app/entrypoint.sh ${{ github.event.inputs.dlt_run_type || 'incremental' }}
      timeout-minutes: 30

    - name: Upload DBT artifacts (Development)
      uses: actions/upload-artifact@v4
      with:
        name: dbt-artifacts-dev-${{ github.run_id }}
        path: dbt/target/
        retention-days: 3

    - name: Cleanup Docker Compose services
      if: always()
      run: |
        echo "🧹 Cleaning up development environment..."
        docker compose down -v

  # Production Environment - DLT/DBT via Docker Compose, Postgres/Grafana in Cloud
  production-pipeline:
    name: Production (Cloud Postgres)
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production' }}
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file for Docker Compose (Production)
      run: |
        cat > .env << EOF
        # Jira API Credentials
        JIRA_SUBDOMAIN=${{ secrets.JIRA_SUBDOMAIN }}
        JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
        
        # PostgreSQL Configuration (Cloud Service)
        POSTGRES_USER=${{ secrets.PROD_POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
        POSTGRES_DB=${{ secrets.PROD_POSTGRES_DB }}
        POSTGRES_HOST=${{ secrets.PROD_POSTGRES_HOST }}
        POSTGRES_PORT=${{ secrets.PROD_POSTGRES_PORT }}
        
        EOF
      env:
        # Mask sensitive values in logs
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}

    - name: Run DLT + DBT Pipeline in Docker (Production)
      run: |
        echo "🏭 Running DLT + DBT pipeline in production mode (full load)..."
        
        # Wait for cloud PostgreSQL to be ready (if applicable)
        echo "⏳ Checking database connectivity..."
        sleep 5  # Give cloud services time to be ready
        
        # Always run full load for production
        echo "🚀 Starting DLT pipeline for production..."
        docker compose run --rm --entrypoint="" -e JIRA_SUBDOMAIN=${{ secrets.JIRA_SUBDOMAIN }} -e JIRA_EMAIL=${{ secrets.JIRA_EMAIL }} -e JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }} dlt /app/entrypoint.sh all
      timeout-minutes: 60

    - name: Upload DBT artifacts (Production)
      uses: actions/upload-artifact@v4
      with:
        name: dbt-artifacts-prod-${{ github.run_id }}
        path: dbt/target/
        retention-days: 30

    - name: Health Check & Notifications (Optional)
      if: always()
      run: |
        echo "🏥 Running production health checks and sending notifications..."

    - name: Cleanup DLT Docker Compose service
      if: always()
      run: |
        echo "🧹 Cleaning up DLT Docker Compose service..."
        docker compose down -v dlt