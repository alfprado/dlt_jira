name: Data Pipeline CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  POSTGRES_VERSION: '15'
  #DBT_PROFILES_DIR: './dbt'
  DLT_PROFILES_DIR: './.dlt'

jobs:
  # FASE 1: Validação de Código e Dependências
  code-validation:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/dbt
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt', '**/packages.yml') }}
        
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install dbt-core dbt-postgres
        pip install pytest pytest-cov pytest-mock
        pip install black flake8 isort bandit safety
        
    - name: Code Formatting (Black)
      run: black --check --diff run_pipeline.py orchestrator.py monitor.py jira/ tests/
      
    - name: Import Sorting (isort)
      run: isort --check-only --diff run_pipeline.py orchestrator.py monitor.py jira/ tests/
      
    - name: Linting (Flake8)
      run: flake8 run_pipeline.py orchestrator.py monitor.py jira/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
      
    # MyPy removed from workflow
      
    - name: Security Scan (Bandit)
      run: bandit -r run_pipeline.py orchestrator.py monitor.py jira/ -f json -o bandit-report.json || true
      
    - name: Dependency Security (Safety)
      run: safety check --json > safety-report.json || true

  # FASE 2: Testes Unitários e Integração
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-validation
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock psutil
        
    - name: Run Unit Tests
      run: |
        pytest tests/ -v \
          --cov=run_pipeline \
          --cov=orchestrator \
          --cov=monitor \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=test-results.xml
          
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-coverage


  # FASE 3: Testes de Pipeline Completo
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_jira_dw
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install dbt-core dbt-postgres
        
    - name: Setup Test Environment
      run: |
        # Create test secrets
        mkdir -p .dlt
        cat > .dlt/secrets.toml << EOF
        [sources.jira]
        subdomain = "test-subdomain"
        email = "test@example.com"
        api_token = "test-token"
        
        [destination.postgres.credentials]
        database = "test_jira_dw"
        password = "test_password"
        username = "test_user"
        host = "localhost"
        port = 5432
        EOF
        
    - name: Test Pipeline Commands
      run: |
        # Test individual commands
        python run_pipeline.py --help || true
        
        # Test with mock data (expected to fail gracefully)
        python run_pipeline.py extract || echo "Expected failure - no real API"
        python run_pipeline.py transform || echo "Expected failure - no data"
        
    - name: Test Docker Build
      run: |
        docker build -t jira-pipeline:test .
        docker run --rm jira-pipeline:test python -c "import dlt, dbt; print('Dependencies OK')"

  # FASE 4: Testes de Performance
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler
        
    - name: Run Performance Tests
      run: |
        pytest tests/test_performance.py -v --benchmark-only --benchmark-save=performance
        
    - name: Memory Profiling
      run: |
        python -m memory_profiler run_pipeline.py extract || echo "Memory profiling completed"

  # FASE 5: Build e Preparação para Deploy
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Build Docker Image
      run: |
        docker build -t jira-pipeline:latest .
        docker tag jira-pipeline:latest jira-pipeline:${{ github.sha }}
        
    - name: Prepare for Deploy
      run: |
        echo "✅ Build completed successfully!"
        echo "Docker image ready for deployment"
        