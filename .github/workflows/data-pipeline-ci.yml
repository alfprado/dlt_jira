name: Data Pipeline CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  POSTGRES_VERSION: '15'
  DBT_PROFILES_DIR: './dbt'
  DLT_PROFILES_DIR: './.dlt'

jobs:
  # FASE 1: Validação de Código e Dependências
  code-validation:
    name: Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/dbt
        key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt', '**/packages.yml') }}
        
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install dbt-core dbt-postgres
        pip install pytest pytest-cov pytest-mock
        pip install black flake8 isort mypy bandit safety
        
    - name: Code Formatting (Black)
      run: black --check --diff .
      
    - name: Import Sorting (isort)
      run: isort --check-only --diff .
      
    - name: Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Type Checking (MyPy)
      run: mypy run_pipeline.py orchestrator.py monitor.py --ignore-missing-imports
      
    - name: Security Scan (Bandit)
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: Dependency Security (Safety)
      run: safety check --json --output safety-report.json || true

  # FASE 2: Testes Unitários e Integração
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-validation
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock psutil
        
    - name: Run Unit Tests
      run: |
        pytest tests/ -v \
          --cov=run_pipeline \
          --cov=orchestrator \
          --cov=monitor \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=test-results.xml
          
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-coverage

  # FASE 3: Testes de Dados (dbt)
  data-tests:
    name: Data Tests (dbt)
    runs-on: ubuntu-latest
    needs: code-validation
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_jira_dw
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dbt
      run: |
        pip install dbt-core dbt-postgres
        
    - name: Setup dbt Profile
      run: |
        mkdir -p ~/.dbt
        cat > ~/.dbt/profiles.yml << EOF
        jira_analytics:
          outputs:
            test:
              type: postgres
              host: localhost
              user: test_user
              password: test_password
              port: 5432
              dbname: test_jira_dw
              schema: public
              threads: 4
              keepalives_idle: 0
              connect_timeout: 10
              retries: 1
          target: test
        EOF
        
    - name: Install dbt Dependencies
      run: |
        cd dbt
        dbt deps
        
    - name: dbt Parse
      run: |
        cd dbt
        dbt parse --target test
        
    - name: dbt Compile
      run: |
        cd dbt
        dbt compile --target test
        
    - name: dbt Test (Schema Tests)
      run: |
        cd dbt
        dbt test --target test --store-failures
        
    - name: dbt Docs Generate
      run: |
        cd dbt
        dbt docs generate --target test
        
    - name: Upload dbt Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dbt-artifacts
        path: |
          dbt/target/
          dbt/logs/

  # FASE 4: Testes de Pipeline Completo
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, data-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_jira_dw
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install dbt-core dbt-postgres
        
    - name: Setup Test Environment
      run: |
        # Create test secrets
        mkdir -p .dlt
        cat > .dlt/secrets.toml << EOF
        [sources.jira]
        subdomain = "test-subdomain"
        email = "test@example.com"
        api_token = "test-token"
        
        [destination.postgres.credentials]
        database = "test_jira_dw"
        password = "test_password"
        username = "test_user"
        host = "localhost"
        port = 5432
        EOF
        
    - name: Test Pipeline Commands
      run: |
        # Test individual commands
        python run_pipeline.py --help || true
        
        # Test with mock data (expected to fail gracefully)
        python run_pipeline.py extract || echo "Expected failure - no real API"
        python run_pipeline.py transform || echo "Expected failure - no data"
        
    - name: Test Docker Build
      run: |
        docker build -t jira-pipeline:test .
        docker run --rm jira-pipeline:test python -c "import dlt, dbt; print('Dependencies OK')"

  # FASE 5: Testes de Performance
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler
        
    - name: Run Performance Tests
      run: |
        pytest tests/test_performance.py -v --benchmark-only --benchmark-save=performance
        
    - name: Memory Profiling
      run: |
        python -m memory_profiler run_pipeline.py extract || echo "Memory profiling completed"

  # FASE 6: Deploy e Notificação
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [unit-tests, data-tests, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Build Docker Image
      run: |
        docker build -t jira-pipeline:latest .
        docker tag jira-pipeline:latest jira-pipeline:${{ github.sha }}
        
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment logic here
        
    - name: Notify Success
      run: |
        echo "✅ Pipeline deployed successfully!"
        
  # FASE 7: Monitoramento e Alertas
  monitoring:
    name: Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Check Test Results
      run: |
        if [ "${{ needs.unit-tests.result }}" == "success" ] && 
           [ "${{ needs.data-tests.result }}" == "success" ] && 
           [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ All tests passed!"
        else
          echo "❌ Some tests failed!"
          exit 1
        fi
        
    - name: Generate Report
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Data Tests: ${{ needs.data-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY